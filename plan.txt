Sure, here's a high-level plan to create a website that scrapes stock data and allows you to manage portfolios:

Setup your project: Initialize a new project with HTML, CSS, and JavaScript. You can use Node.js for the server-side logic.
// Initialize a new Node.js project
npm init -y
Create the Frontend: Design your HTML pages for displaying the portfolio, adding/removing stocks, and running reports. Use CSS for styling.

Scrape Stock Data: Use a library like axios for making HTTP requests and cheerio for parsing HTML. Make sure to respect the website's robots.txt and terms of service.

// Install axios and cheerio
npm install axios cheerio
Backend Logic: Write server-side logic to handle requests for adding/removing stocks from the portfolio and running reports. You can use Express.js, a popular web application framework for Node.js.
// Install Express.js
npm install express
Database: Use a database to store the portfolio data. MongoDB is a good choice for JavaScript applications.
// Install MongoDB driver
npm install mongodb
Run Reports: Implement logic to run reports on the portfolio. This could involve calculating the total value, the return on investment, etc.

Deploy: Finally, deploy your website to a server. You can use services like Heroku, AWS, or Vercel.

Remember, this is a high-level plan and each step involves a lot of details. You might need to learn about web scraping, REST APIs, databases, and deployment if you're not already familiar with them